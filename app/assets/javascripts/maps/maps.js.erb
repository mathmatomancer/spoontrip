var SPOONTRIP = {};
var MapSettings;
var calculatePolygon;

(function($) {
  MapSettings = {
    map: null,
    directions: null,
    starting_coordinates: null,
    path: [],
    markers: [],
    infoWindow: undefined,
    argument_string: function () {
      var string = '';
      MapSettings.path.forEach(function (point) {
        string = string + (Math.round(point.lat() * 100) / 100) + ',' + (Math.round(point.lng() * 100) / 100) + ','
      });
      return 'polygon='+string;
    }
  };

  SPOONTRIP = {
    mapStart: function () {
      MapSettings.map = new google.maps.Map(document.getElementById("google-map"), {
        zoom: 10,
        mapTypeId: google.maps.MapTypeId.ROADMAP,

      });
      mapCenter(); // fills in coordinates

      $('#fetch-data').hide();

      MapSettings.directions = new google.maps.DirectionsService();
      MapSettings.display = new google.maps.DirectionsRenderer();
      MapSettings.display.setMap(MapSettings.map)
    }
  };

  function mapCenter() {
    navigator.geolocation.getCurrentPosition(getCoords);
  }

  function getCoords(position) {
    MapSettings.starting_coordinates = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    MapSettings.map.setCenter(MapSettings.starting_coordinates)
  }

  function showInfoWindow(marker) {
    if (typeof MapSettings.infoWindow != 'undefined') {
      MapSettings.infoWindow.close();
    }
    MapSettings.infoWindow = new google.maps.InfoWindow({content: marker.content});
    MapSettings.infoWindow.open(MapSettings.map, marker);
  }

  function getInfoWindowHtml(data) {
    return '' +
      '<div class="info-window">' +
      '<a href="' + data.urbanspoon_url + '">' + data.title + '</a>' +
      ((data.total_votes >= 10) ? '<br />' + data.votes_percent + '% like it' : '') +
      '<br />' +
      ((data.price) ? data.price + '/4 ' : '') +
      ((data.cuisines.length > 0) ? data.cuisines[0].title : '') +
      '<br />' +
      data.phone +
      '<br />' +
      data.address.street + ', ' + data.address.city + ', ' + data.address.state +
      '</div>';
  }

  function setMarker(data) {
    var marker = new google.maps.Marker({
      map: MapSettings.map,
      content: getInfoWindowHtml(data),
      position: new google.maps.LatLng(data.lat, data.lon),
      title: data.title
    });
    MapSettings.markers[data.id] = marker;

    google.maps.event.addListener(marker, 'click', function () {
      showInfoWindow(marker)
    });

    return marker;
  }

  function getRestaurants() {
    calculatePolygon(MapSettings.test_points);
    var url = 'http://www.urbanspoon.com/api/v2/restaurants?' + MapSettings.argument_string();
    console.log(url);
    $.ajax({url: url}).done(function (data) {
      var response = data.restaurants;
      console.log(response);
      response.forEach(function (element) {
        setMarker(element);
      });
    });
  }

  function getDirections(e) {
    e.preventDefault();
    var form = $(this);
    var origin = $('#origin', form).val();
    var dest = $('#destination', form).val();
    MapSettings.directions.route({origin: origin, destination: dest, travelMode: google.maps.TravelMode.DRIVING}, processDirections)
  }

  function processDirections(data, status) {
    showResults(data, status);
    grabPoints(data);
    getRestaurants();
  }

  function grabPoints(data) {

    // data is a DirectionsResult, has routes w/legs and such. assume 1 route, 1 leg, grab points

    var steps = data.routes[0].legs[0].steps;
    MapSettings.test_points = data.routes[0].overview_path;
  }

  function showResults(data, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      MapSettings.display.setDirections(data);
    }
  }

  $(document).on('click', '#fetch-data', getRestaurants);

  $(document).on('submit', '#directions form', getDirections);

  $.ajaxSetup({headers: {'ClientId': '<%= ENV['CLIENT_ID'] %>' }});

  calculatePolygon = function (path){
    var overviewPath = path,
        overviewPathGeo = [];
    console.log(overviewPath.length);
    var increment = Math.round(overviewPath.length / 25); // get about 25 points to work with
    for (var i = 0; i < overviewPath.length; i = i+ increment) {
      overviewPathGeo.push(
          [overviewPath[i].lat(), overviewPath[i].lat()]
      );
    }
    console.log(overviewPathGeo.length);
    var distance = 0.1,// rough radius, scale around 10km
        geoInput = {
          type: "LineString",
          coordinates: overviewPathGeo
        };
    var geoReader = new jsts.io.GeoJSONReader(),
        geoWriter = new jsts.io.GeoJSONWriter();
    var geometry = geoReader.read(geoInput).buffer(distance);
    var polygon = geoWriter.write(geometry);

    var oLanLng = [];
    var oCoordinates;
    oCoordinates = polygon.coordinates[0];
    console.log(oCoordinates.length);
    for (i = 0; i < oCoordinates.length; i++) {
      var oItem;
      oItem = oCoordinates[i];
      oLanLng.push(new google.maps.LatLng(oItem[1], oItem[0]));
    }

    var polygone = new google.maps.Polygon({
      paths: oLanLng
    });

    MapSettings.path = polygone.latLngs.getArray()[0].j;
  }
})(jQuery);

